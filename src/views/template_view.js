import DynamicView from "./dynamic_view"
import { def, settings } from "../helpers"
import Compile from "../compile"
import Collection from "../collection"

// Generated by CoffeeScript 1.7.1
var TemplateView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TemplateView = (function(_super) {
  __extends(TemplateView, _super);

  function TemplateView(asts, context) {
    var ast;
    this.context = context;
    TemplateView.__super__.constructor.apply(this, arguments);
    this.children = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = asts.length; _i < _len; _i++) {
        ast = asts[_i];
        _results.push(Compile[ast.type](ast, context));
      }
      return _results;
    })();
    this.children = new Collection(this.children);
  }

  def(TemplateView.prototype, "fragment", {
    get: function() {
      var fragment;
      fragment = settings.document.createDocumentFragment();
      this.append(fragment);
      fragment.view = this;
      fragment.remove = this.remove.bind(this);
      return fragment;
    }
  });

  return TemplateView;

})(DynamicView);

export default TemplateView;
