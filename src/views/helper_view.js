import DynamicView from "./dynamic_view"
import { def } from "../helpers"

// Generated by CoffeeScript 1.7.1
var HelperView, normalize,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

normalize = function(val) {
  var reduction;
  if (!val) {
    return [];
  }
  reduction = function(aggregate, element) {
    var child, div, _i, _j, _len, _len1, _ref, _ref1;
    if (typeof element === "string") {
      div = Serenade.document.createElement("div");
      div.innerHTML = element;
      _ref = div.childNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        aggregate.push(new View(child));
      }
    } else if (element.nodeName === "#document-fragment") {
      if (element.view) {
        aggregate = aggregate.concat(element.view);
      } else {
        _ref1 = element.childNodes;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          aggregate.push(new View(child));
        }
      }
    } else {
      aggregate.push(new View(element));
    }
    return aggregate;
  };
  return new Collection([].concat(val).reduce(reduction, []));
};

HelperView = (function(_super) {
  __extends(HelperView, _super);

  function HelperView(ast, context, helper) {
    var property, _i, _len, _ref;
    this.ast = ast;
    this.context = context;
    this.helper = helper;
    this.render = __bind(this.render, this);
    this.update = __bind(this.update, this);
    HelperView.__super__.constructor.apply(this, arguments);
    this.update();
    _ref = this.ast.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      if (property.bound === true) {
        this._bindEvent(this.context["" + property.value + "_property"], this.update);
      }
    }
  }

  HelperView.prototype.update = function() {
    this.clear();
    this.children = normalize(this.helper.call({
      context: this.context,
      render: this.render
    }, this["arguments"]));
    return this.rebuild();
  };

  def(HelperView.prototype, "arguments", {
    get: function() {
      var args, property, _i, _len, _ref;
      args = {};
      _ref = this.ast.properties;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        if (property.scope !== "attribute") {
          throw new SyntaxError("scope '" + property.scope + "' is not allowed for custom helpers");
        }
        args[property.name] = property["static"] || property.bound ? this.context[property.value] : property.value;
      }
      return args;
    }
  });

  HelperView.prototype.render = function(context) {
    return new TemplateView(this.ast.children, context).fragment;
  };

  return HelperView;

})(DynamicView);

export default DynamicView;
