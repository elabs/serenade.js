import View from "./view"
import Compile from "../compile"
import { assignUnlessEqual } from "../helpers"

// Generated by CoffeeScript 1.7.1
var TextView, formatTextValue,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

formatTextValue = function(value) {
  if (value === 0) {
    value = "0";
  }
  return value || "";
};

TextView = (function(_super) {
  __extends(TextView, _super);

  function TextView(ast, context) {
    var property, value;
    this.ast = ast;
    this.context = context;
    if (ast.bound && ast.value) {
      value = this.context[ast.value];
      property = this.context["" + ast.value + "_property"];
      if (property != null) {
        if (typeof property.registerGlobal === "function") {
          property.registerGlobal(value);
        }
      }
      this._bindEvent(property, (function(_this) {
        return function(_, value) {
          return _this.update(value);
        };
      })(this));
      value;
    } else if (ast.value) {
      value = ast.value;
    } else {
      value = context;
    }
    TextView.__super__.constructor.call(this, Serenade.document.createTextNode(""));
    this.update(value);
  }

  TextView.prototype.update = function(value) {
    return assignUnlessEqual(this.node, "nodeValue", formatTextValue(value));
  };

  return TextView;

})(View);

Compile.text = function(ast, context) {
  return new TextView(ast, context);
};

export default TextView;
