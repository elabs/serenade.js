import DynamicView from "./view"

// Generated by CoffeeScript 1.7.1
var CollectionView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CollectionView = (function(_super) {
  __extends(CollectionView, _super);

  function CollectionView(ast, context) {
    var item, items;
    this.ast = ast;
    this.context = context;
    this.update = __bind(this.update, this);
    CollectionView.__super__.constructor.apply(this, arguments);
    items = this.context[ast.argument] || [];
    this.lastItems = items.map(function(i) {
      return i;
    });
    this.children = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        _results.push(new TemplateView(this.ast.children || [], item, this.context));
      }
      return _results;
    }).call(this);
    this.children = new Collection(this.children);
    this.cb = (function(_this) {
      return function(_, after) {
        return _this.replace(after);
      };
    })(this);
    this._bindEvent(this.context["" + ast.argument + "_property"], this.update);
    this._bindEvent(items.change, this.cb);
  }

  CollectionView.prototype.update = function(before, after) {
    this._unbindEvent(before != null ? before.change : void 0, this.cb);
    this._bindEvent(after != null ? after.change : void 0, this.cb);
    return this.replace(after);
  };

  CollectionView.prototype.replace = function(items) {
    var operation, _i, _len, _ref;
    _ref = Transform(this.lastItems, items);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      operation = _ref[_i];
      switch (operation.type) {
        case "insert":
          this._insertChild(operation.index, new TemplateView(this.ast.children || [], operation.value));
          break;
        case "remove":
          this._deleteChild(operation.index);
          break;
        case "swap":
          this._swapChildren(operation.index, operation["with"]);
      }
    }
    return this.lastItems = (items != null ? items.map(function(a) {
      return a;
    }) : void 0) || [];
  };

  CollectionView.prototype._deleteChild = function(index) {
    this.children[index].remove();
    return this.children.deleteAt(index);
  };

  CollectionView.prototype._insertChild = function(index, view) {
    var last, _ref;
    if (this.anchor.parentNode) {
      last = ((_ref = this.children[index - 1]) != null ? _ref.lastElement : void 0) || this.anchor;
      view.insertAfter(last);
    }
    return this.children.insertAt(index, view);
  };

  CollectionView.prototype._swapChildren = function(fromIndex, toIndex) {
    var last, _ref, _ref1, _ref2;
    if (this.anchor.parentNode) {
      last = ((_ref = this.children[fromIndex - 1]) != null ? _ref.lastElement : void 0) || this.anchor;
      this.children[toIndex].insertAfter(last);
      last = ((_ref1 = this.children[toIndex - 1]) != null ? _ref1.lastElement : void 0) || this.anchor;
      this.children[fromIndex].insertAfter(last);
    }
    return _ref2 = [this.children[toIndex], this.children[fromIndex]], this.children[fromIndex] = _ref2[0], this.children[toIndex] = _ref2[1], _ref2;
  };

  return CollectionView;

})(DynamicView);

export default CollectionView;
