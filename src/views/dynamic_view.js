// Generated by CoffeeScript 1.7.1
var DynamicView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DynamicView = (function(_super) {
  __extends(DynamicView, _super);

  function DynamicView(ast, context) {
    this.ast = ast;
    this.context = context;
    this.anchor = Serenade.document.createTextNode('');
    this.items = [];
    this.children = new Collection();
  }

  DynamicView.prototype.replace = function(children) {
    this.clear();
    this.children = new Collection(children);
    return this.rebuild();
  };

  DynamicView.prototype.rebuild = function() {
    var last, view, _i, _len, _ref, _results;
    if (this.anchor.parentNode) {
      last = this.anchor;
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        view.insertAfter(last);
        _results.push(last = view.lastElement);
      }
      return _results;
    }
  };

  DynamicView.prototype.clear = function() {
    var view, _i, _len, _ref;
    _ref = this.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view = _ref[_i];
      view.remove();
    }
    return this.children.update([]);
  };

  DynamicView.prototype.remove = function() {
    this.detach();
    this.clear();
    if (this.anchor.parentNode) {
      return this.anchor.parentNode.removeChild(this.anchor);
    }
  };

  DynamicView.prototype.append = function(inside) {
    inside.appendChild(this.anchor);
    return this.rebuild();
  };

  DynamicView.prototype.insertAfter = function(after) {
    after.parentNode.insertBefore(this.anchor, after.nextSibling);
    return this.rebuild();
  };

  def(DynamicView.prototype, "lastElement", {
    configurable: true,
    get: function() {
      var _ref;
      return ((_ref = this.children.last) != null ? _ref.lastElement : void 0) || this.anchor;
    }
  });

  return DynamicView;

})(View);

export default DynamicView;
