import { merge } from "../helpers"
import Collection from "../collection"

// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

export default function(name, options) {
  var propOptions;
  if (options == null) {
    options = {};
  }
  propOptions = merge(options, {
    set: function(model) {
      var newCollection, oldCollection, previous, valueName;
      valueName = "_" + name;
      if (model && model.constructor === Object && options.as) {
        model = new (options.as())(model);
      }
      previous = this[valueName];
      this[valueName] = model;
      if (options.inverseOf) {
        newCollection = (model != null ? model[options.inverseOf] : void 0) || new Collection();
        oldCollection = (previous != null ? previous[options.inverseOf] : void 0) || new Collection();
        oldCollection["delete"](this);
        if (__indexOf.call(newCollection, this) < 0) {
          return newCollection.push(this);
        }
      }
    }
  });
  this.property(name, propOptions);
  return this.property(name + 'Id', {
    get: function() {
      var _ref;
      return (_ref = this[name]) != null ? _ref.id : void 0;
    },
    set: function(id) {
      if (id != null) {
        return this[name] = options.as().find(id);
      }
    },
    dependsOn: name,
    serialize: options.serializeId
  });
};
